name: SIRHA CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sirha-backend
  JAVA_VERSION: '17'

jobs:
  unit-test:
    name: Test & Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Verify project (tests + coverage)
        run: mvn -B verify jacoco:report

      - name: Publish Maven test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Unit Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload JaCoCo coverage
        uses: codecov/codecov-action@v4
        with:
          file: target/site/jacoco/jacoco.xml
          flags: unittests
          name: sirha-backend-coverage

      - name: SonarQube analysis (optional)
        if: ${{ secrets.SONAR_TOKEN != '' && secrets.SONAR_HOST_URL != '' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B sonar:sonar

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sirha-backend-jar
          path: target/*.jar

  security-scan:
    name: Dependency & Container Scan
    needs: unit-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build & Push Docker Image
    needs:
      - unit-test
      - security-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Build application
        run: mvn -B clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Publish image reference
        id: image
        run: echo "image=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> "$GITHUB_OUTPUT"

  deploy-dev:
    name: Deploy to Azure Container Apps (Dev)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: ${{ steps.deploy.outputs.ingress-url }}

    steps:
      - name: Azure login (Managed Identity / SP)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Deploy container to ACA
        id: deploy
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ secrets.AZURE_RG_DEV }}
          containerAppEnvironment: ${{ secrets.AZURE_ACA_ENV_DEV }}
          containerAppName: sirha-api-dev
          imageToDeploy: ${{ needs.build-and-push.outputs.image }}
          secrets: |
            mongodb-uri=${{ secrets.MONGODB_URI_DEV }}
            jwt-secret=${{ secrets.JWT_SECRET_DEV }}
            db-password=${{ secrets.DB_PASSWORD_DEV }}
          environmentVariables: |
            SPRING_PROFILES_ACTIVE=development
            MONGODB_URI=secretref:mongodb-uri
            MONGODB_DATABASE=${{ vars.MONGODB_DATABASE_DEV != '' && vars.MONGODB_DATABASE_DEV || 'sirha_sbx' }}
            JWT_SECRET=secretref:jwt-secret
            DB_PASSWORD=secretref:db-password
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS_DEV }}

  deploy-staging:
    name: Deploy to Azure Container Apps (Staging)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.ingress-url }}

    steps:
      - name: Azure login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Deploy container to ACA
        id: deploy
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ secrets.AZURE_RG_STAGING }}
          containerAppEnvironment: ${{ secrets.AZURE_ACA_ENV_STAGING }}
          containerAppName: sirha-api-staging
          imageToDeploy: ${{ needs.build-and-push.outputs.image }}
          secrets: |
            mongodb-uri=${{ secrets.MONGODB_URI_STAGING }}
            jwt-secret=${{ secrets.JWT_SECRET_STAGING }}
            db-password=${{ secrets.DB_PASSWORD_STAGING }}
          environmentVariables: |
            SPRING_PROFILES_ACTIVE=staging
            MONGODB_URI=secretref:mongodb-uri
            MONGODB_DATABASE=${{ vars.MONGODB_DATABASE_STAGING != '' && vars.MONGODB_DATABASE_STAGING || 'sirha_preprod' }}
            JWT_SECRET=secretref:jwt-secret
            DB_PASSWORD=secretref:db-password
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS_STAGING }}

  deploy-prod:
    name: Deploy to Azure Container Apps (Prod)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.ingress-url }}

    steps:
      - name: Azure login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Deploy container to ACA
        id: deploy
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ secrets.AZURE_RG_PROD }}
          containerAppEnvironment: ${{ secrets.AZURE_ACA_ENV_PROD }}
          containerAppName: sirha-api-prod
          imageToDeploy: ${{ needs.build-and-push.outputs.image }}
          secrets: |
            mongodb-uri=${{ secrets.MONGODB_URI_PROD }}
            jwt-secret=${{ secrets.JWT_SECRET_PROD }}
            db-password=${{ secrets.DB_PASSWORD_PROD }}
          environmentVariables: |
            SPRING_PROFILES_ACTIVE=production
            MONGODB_URI=secretref:mongodb-uri
            MONGODB_DATABASE=${{ vars.MONGODB_DATABASE_PROD != '' && vars.MONGODB_DATABASE_PROD || 'sirha_prod' }}
            JWT_SECRET=secretref:jwt-secret
            DB_PASSWORD=secretref:db-password
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS_PROD }}

      - name: Smoke test production API
        run: |
          curl -f ${{ steps.deploy.outputs.ingress-url }}/actuator/health || exit 1
